# Functions, modules, and pattern matching

## Anonymous functions

```elixir
fn num -> num + 7 end
```

```elixir
&(&1 + 7)
```

```elixir
(fn num -> num + 7 end).(10)
```

```elixir
(&(&1 + 7)).(10)
```

```elixir
(fn a, b, c -> a + b + c end).(30, 30, 40)
```

```elixir
(&(&1 + &2 + &3)).(300, 300, 400)
```

```elixir
add_7 = fn num -> num + 7 end
```

```elixir
add_7.(8)
```

## Modules & (named) functions

```elixir
defmodule MyModule do
end
```

```elixir
defmodule MyModule do
  def add_2(num), do: 2 + num

  def add_3(num) do
    3 + num
  end
end
```

```elixir
MyModule.add_2(4)
```

```elixir
MyModule.add_3(9)
```

```elixir
alias MyModule, as: M

M.add_3(5)
```

```elixir
import MyModule

add_3(7)
```

## The pipeline operator, |>

```elixir
7 |> add_3() |> add_2()
```

```elixir
7 |> (&add_3/1).() |> (&add_2/1).()
```

```elixir
7 |> (&(&1 + 3)).() |> (&(&1 + 2)).()
```

```elixir
7
|> (&(&1 + 3)).()
|> (&(&1 + 2)).()
```

```elixir
7
|> add_3()
|> add_2()
```

## Multi-clause functions with pattern-matching

```elixir
defmodule Greeting do
  def greet(:professor_williams), do: "Hello, Professor Williams"

  def greet(:mom), do: "Hi, Mom!"

  def greet(:best_friend), do: "Yo! Wassup?!?!"
end
```

```elixir
alias Greeting, as: G

G.greet(:professor_williams) |> IO.inspect()
G.greet(:mom) |> IO.inspect()
G.greet(:best_friend) |> IO.inspect()
```
