# Exploring Explorer

## Installation

Connect to a `Mix` project with `Explorer` installed or:

```elixir
Mix.install([
  {:explorer, "~> 0.1.0-dev", github: "elixir-nx/explorer"},
  {:kino, "~> 0.4.1"}
])
```

## Reading and writing data

Currently, data can only be read in from delimited files. Support for JSON and Parquet is forthcoming. Your 'usual suspects' of options are available:

* `delimiter` - A single character used to separate fields within a record. (default: `","`)
* `dtypes` - A keyword list of `[column_name: dtype]`. If `nil`, dtypes are imputed from the first 1000 rows. (default: `nil`)
* `header?` - Does the file have a header of column names as the first row or not? (default: `true`)
* `max_rows` - Maximum number of lines to read. (default: `Inf`)
* `names` - A list of column names. Must match the width of the dataframe. (default: nil)
* `null_character` - The string that should be interpreted as a nil value. (default: `"NA"`)
* `skip_rows` - The number of lines to skip at the beginning of the file. (default: `0`)
* `with_columns` - A list of column names to keep. If present, only these columns are read
* into the dataframe. (default: `nil`)

`Explorer` also has a dataset built in [with more to come](https://github.com/amplifiedai/explorer/issues/16). Let's use that.

```elixir
df = Explorer.Datasets.fossil_fuels()
```

You'll notice that the output looks slightly different than many dataframe libraries. `Explorer` takes inspiration on this front from [`glimpse`](https://pillar.r-lib.org/reference/glimpse.html) in R. A benefit to this approach is that you will rarely need to elide columns.

There is an [open PR](https://github.com/livebook-dev/kino/pull/42) implementing the `Kino.Render` protocol and it should be available soon.

Writing delimited files is very similar. The options are a little more limited:

* `header?` - Should the column names be written as the first line of the file? (default: `true`)
* `delimiter` - A single character used to separate fields within a record. (default: `","`)

First, let's add some useful aliases:

```elixir
alias Explorer.DataFrame
alias Explorer.Series
```

And then write to a file of your choosing:

```elixir
input = Kino.Input.text("KinoInput")
```

```elixir
filename = Kino.Input.read(input)
DataFrame.write_csv(df, filename)
```

## Working with Series

`Explorer`, like `Polars`, works up from the concept of a `Series`. These are like `vectors` in R or `series` in Pandas.

For simplicity, `Explorer` uses the following `Series` `dtypes`:

* `:float` - 64-bit floating point number
* `:integer` - 64-bit signed integer
* `:boolean` - Boolean
* `:string` - UTF-8 encoded binary
* `:date` - Date type that unwraps to `Elixir.Date`
* `:datetime` - DateTime type that unwraps to `Elixir.NaiveDateTime`

`Series` can be constructed from `Elixir` basic types. For example:

```elixir
s1 = Series.from_list([1, 2, 3])
```

```elixir
s2 = Series.from_list(["a", "b", "c"])
```

```elixir
s3 = Series.from_list([~D[2011-01-01], ~D[1965-01-21]])
```

You'll notice that the `dtype` and length of the `Series` are at the top of the printed value. You can get those programmatically as well.

```elixir
Series.dtype(s3)
```

```elixir
Series.length(s3)
```

And the printed values max out at 50:

```elixir
1..100 |> Enum.to_list() |> Series.from_list()
```

Series are also nullable.

```elixir
s = Series.from_list([1.0, 2.0, nil, nil, 5.0])
```

And you can fill in those missing values using one of the following strategies:

* `:forward` - replace nil with the previous value
* `:backward` - replace nil with the next value
* `:max` - replace nil with the series maximum
* `:min` - replace nil with the series minimum
* `:mean` - replace nil with the series mean

```elixir
Series.fill_missing(s, :mean)
```

In the case of mixed numeric types (i.e. integers and floats), `Series` will downcast to a float:

```elixir
Series.from_list([1, 2.0])
```

In all other cases, `Series` must all be of the same `dtype` or else you'll get an `ArgumentError`.

```elixir
Series.from_list([1, 2, 3, "a"])
```

One of the goals of `Explorer` is *useful error messages*. If you look at the error above, you get:

> Cannot make a series from mismatched types. Type of "a" does not match inferred dtype integer.

Hopefully this makes abundantly clear what's going on.

`Series` also implements the `Access` protocol. You can slice and dice in many ways:

```elixir
s = 1..10 |> Enum.to_list() |> Series.from_list()
```

```elixir
s[1]
```

```elixir
s[-1]
```

```elixir
s[0..4]
```

```elixir
s[[0, 4, 4]]
```

And of course, you can convert back to an Elixir list.

```elixir
Series.to_list(s)
```

`Explorer` supports comparisons.

```elixir
s = 1..11 |> Enum.to_list() |> Series.from_list()
```

```elixir
s1 = 11..1 |> Enum.to_list() |> Series.from_list()
```

```elixir
Series.equal(s, s1)
```

```elixir
Series.equal(s, 5)
```

```elixir
Series.not_equal(s, 10)
```

```elixir
Series.greater_equal(s, 4)
```

And arithmetic.

```elixir
Series.add(s, s1)
```

```elixir
Series.subtract(s, 4)
```

```elixir
Series.multiply(s, s1)
```

Remember those helpful errors? I've tried to add those throughout. So if you try to do arithmetic with mismatching dtypes:

```elixir
s = Series.from_list([1, 2, 3])
s1 = Series.from_list([1.0, 2.0, 3.0])
Series.add(s, s1)
```

Just kidding! Integers and floats will downcast to floats. Let's try again:

```elixir
s = Series.from_list([1, 2, 3])
s1 = Series.from_list(["a", "b", "c"])
Series.add(s, s1)
```

You can flip them around.

```elixir
s = Series.from_list([1, 2, 3, 4])
Series.reverse(s)
```

And sort.

```elixir
1..100 |> Enum.to_list() |> Enum.shuffle() |> Series.from_list() |> Series.sort()
```

Or argsort.

```elixir
s = 1..100 |> Enum.to_list() |> Enum.shuffle() |> Series.from_list()
ids = Series.argsort(s)
```

Which you can pass to `Explorer.Series.take/2` if you want the sorted values.

```elixir
Series.take(s, ids)
```

You can calculate cumulative values.

```elixir
s = 1..100 |> Enum.to_list() |> Series.from_list()
Series.cum_sum(s)
```

Or rolling ones.

```elixir
Series.rolling_sum(s, 4)
```

You can count and list unique values.

```elixir
s = Series.from_list(["a", "b", "b", "c", "c", "c"])
Series.distinct(s)
```

```elixir
Series.n_distinct(s)
```

And you can even get a dataframe showing the counts for each distinct value.

```elixir
Series.count(s)
```

## Working with DataFrames

A `DataFrame` is really just a collection of `Series` of the same length. Which is why you can create a `DataFrame` from a `Map`.

```elixir
DataFrame.from_map(%{a: [1, 2, 3], b: ["a", "b", "c"]})
```

Similarly to `Series`, the `Inspect` implementation prints some info at the top and to the left. At the top we see the shape of the dataframe (rows and columns) and then for each column we see the name, dtype, and first five values. We can see a bit more from that built-in dataset we loaded in earlier.

```elixir
df
```

You will also see grouping information there, but we'll get to that later. You can get the info yourself directly:

```elixir
DataFrame.names(df)
```

```elixir
DataFrame.dtypes(df)
```

```elixir
DataFrame.shape(df)
```

```elixir
{DataFrame.n_rows(df), DataFrame.n_cols(df)}
```

We can grab the head.

```elixir
DataFrame.head(df)
```

Or the tail. Let's get a few more values from the tail.

```elixir
DataFrame.tail(df, 10)
```

### Select

Let's jump right into it. We can select columns pretty simply.

```elixir
DataFrame.select(df, ["year", "country"])
```

But Elixir gives us some superpowers. In R there's [`tidy-select`](https://dplyr.tidyverse.org/reference/dplyr_tidy_select.html). I don't think we need that in Elixir. Anywhere in `Explorer` where you need to pass a list of column names, you can also execute a filtering callback on the column names. It's just an anonymous function passed to `df |> DataFrame.names() |> Enum.filter(callback_here)`.

```elixir
DataFrame.select(df, &String.ends_with?(&1, "fuel"))
```

Want all but some columns? `DataFrame.select/3` takes `:keep` or `:drop` as the last arg. It just defaults to `:keep`.

```elixir
DataFrame.select(df, &String.ends_with?(&1, "fuel"), :drop)
```

### Filter

The next verb we'll look at is `filter`. You can pass in a boolean mask series of the same length as the dataframe, but I find it's more handy to use callbacks on the dataframe to generate those masks.

```elixir
DataFrame.filter(df, &Series.equal(&1["country"], "AFGHANISTAN"))
```

```elixir
filtered_df =
  df
  |> DataFrame.filter(&Series.equal(&1["country"], "ALGERIA"))
  |> DataFrame.filter(&Series.greater(&1["year"], 2012))
```

```elixir
DataFrame.filter(filtered_df, [true, false])
```

Remember those helpful error messages?

```elixir
DataFrame.filter(df, &Series.equal(&1["cuontry"], "AFGHANISTAN"))
```

### Mutate

A common task in data analysis is to add columns or change existing ones. Mutate is a handy verb.

```elixir
DataFrame.mutate(df, new_column: &Series.add(&1["solid_fuel"], &1["cement"]))
```

Did you catch that? You can pass in new columns as keyword arguments. It also works to transform existing columns.

```elixir
DataFrame.mutate(df,
  gas_fuel: &Series.cast(&1["gas_fuel"], :float),
  gas_and_liquid_fuel: &Series.add(&1["gas_fuel"], &1["liquid_fuel"])
)
```

`DataFrame.mutate/2` is flexible though. You may not always want to use keyword arguments. Given that column names are `String.t()`, it may make more sense to use a map.

```elixir
DataFrame.mutate(df, %{"gas_fuel" => &Series.subtract(&1["gas_fuel"], 10)})
```

`DataFrame.transmute/2`, which is `DataFrame.mutate/2` that only retains the specified columns, is forthcoming.

### Arrange

Sorting the dataframe is pretty straightforward.

```elixir
DataFrame.arrange(df, "year")
```

But it comes with some tricks up its sleeve.

```elixir
DataFrame.arrange(df, asc: "total", desc: "year")
```

Sort operations happen left to right. And keyword list args permit specifying the direction.

### Distinct

Okay, as expected here too. Very straightforward.

```elixir
DataFrame.distinct(df, columns: ["year", "country"])
```

You can specify whether to keep the other columns as well.

```elixir
DataFrame.distinct(df, columns: ["country"], keep_all?: true)
```

### Rename

Rename can take either a list of new names or a callback that is passed to `Enum.map/2` against the names. You can also use a map or keyword args to rename specific columns.

```elixir
DataFrame.rename(df, year: "year_test")
```

```elixir
DataFrame.rename(df, &(&1 <> "_test"))
```

### Dummies

This is fun! We can get dummy variables for unique values.

```elixir
DataFrame.dummies(df, ["year"])
```

```elixir
DataFrame.dummies(df, ["country"])
```

### Sampling

Random samples can give us a percent or a specific number of samples, with or without replacement, and the function is seedable.

```elixir
DataFrame.sample(df, 10)
```

```elixir
DataFrame.sample(df, 0.4)
```

Trying for those helpful error messages again.

```elixir
DataFrame.sample(df, 10000)
```

```elixir
DataFrame.sample(df, 10000, with_replacement?: true)
```

### Pull/slice/take

Slicing and dicing can be done with the `Access` protocol or with explicit pull/slice/take functions.

```elixir
df["year"]
```

```elixir
DataFrame.pull(df, "year")
```

```elixir
df[["year", "country"]]
```

```elixir
DataFrame.take(df, [1, 20, 50])
```

Negative offsets work for slice!

```elixir
DataFrame.slice(df, -10, 5)
```

```elixir
DataFrame.slice(df, 10, 5)
```

### Pivot

We can `pivot_longer/3` and `pivot_wider/4`. These are inspired by [tidyr](https://tidyr.tidyverse.org/articles/pivot.html).

There are some shortcomings in `pivot_wider/4` related to `polars`. The `values_from` column must be a numeric type.

```elixir
DataFrame.pivot_longer(df, ["year", "country"], value_cols: &String.ends_with?(&1, "fuel"))
```

```elixir
DataFrame.pivot_wider(df, "country", "total", id_cols: ["year"])
```

Let's make those names look nicer!

```elixir
tidy_names = fn name ->
  name
  |> String.downcase()
  |> String.replace(~r/\s/, " ")
  |> String.replace(~r/[^A-Za-z\s]/, "")
  |> String.replace(" ", "_")
end

df |> DataFrame.pivot_wider("country", "total", id_cols: ["year"]) |> DataFrame.rename(tidy_names)
```

### Joins

Joining is *fast* and easy. You can specify the columns to join on and how to join. Polars even supports cartesian (cross) joins, so `Explorer` does too.

```elixir
df1 = DataFrame.select(df, ["year", "country", "total"])
df2 = DataFrame.select(df, ["year", "country", "cement"])
DataFrame.join(df1, df2)
```

```elixir
df3 = df |> DataFrame.select(["year", "cement"]) |> DataFrame.slice(0, 500)
DataFrame.join(df1, df3, how: :left)
```

### Grouping

`Explorer` supports groupby operations. They're limited based on what's possible in Polars, but they do most of what you need to do.

```elixir
grouped = DataFrame.group_by(df, ["country"])
```

Notice that the `Inspect` call now shows `groups` as well as `rows` and `columns`. You can, of course, get them explicitly.

```elixir
DataFrame.groups(grouped)
```

And you can ungroup explicitly.

```elixir
DataFrame.ungroup(grouped)
```

But what we care about the most is aggregating! Let's see which country has the max `per_capita` value.

```elixir
grouped |> DataFrame.summarise(per_capita: [:max]) |> DataFrame.arrange(desc: :per_capita_max)
```

Qatar it is. You can use the following aggregations:

* `:min` - Take the minimum value within the group. See `Explorer.Series.min/1`.
* `:max` - Take the maximum value within the group. See `Explorer.Series.max/1`.
* `:sum` - Take the sum of the series within the group. See `Explorer.Series.sum/1`.
* `:mean` - Take the mean of the series within the group. See `Explorer.Series.mean/1`.
* `:median` - Take the median of the series within the group. See `Explorer.Series.median/1`.
* `:first` - Take the first value within the group. See `Explorer.Series.first/1`.
* `:last` - Take the last value within the group. See `Explorer.Series.last/1`.
* `:count` - Count the number of rows per group.
* `:n_unique` - Count the number of unique rows per group.

The API is similar to `mutate`: you can use keyword args or a map and specify aggregations to use.

```elixir
grouped |> DataFrame.summarise(per_capita: [:max, :min], total: [:min])
```

Speaking of `mutate`, it's 'group-aware'. As are `arrange`, `distinct`, and `n_rows`.

```elixir
DataFrame.arrange(grouped, desc: :total)
```

### That's it!

And not. This is certainly not exhaustive, but I hope it gives you a good idea of what can be done and what the 'flavour' of the API is like. I'd love contributors and issues raised where you find them!
