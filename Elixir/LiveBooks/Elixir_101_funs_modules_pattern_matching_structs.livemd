# LiveBook, functions, modules, pattern matching, maps & structs

## LiveBook

* https://livebook.dev/
* https://github.com/livebook-dev/livebook
* https://mermaid-js.github.io/mermaid/#

<!-- livebook:{"break_markdown":true} -->

![livebook.dev.png](images/livebook.dev.png)

<!-- livebook:{"break_markdown":true} -->

https://mermaid-js.github.io/mermaid/#/flowchart

```mermaid
flowchart TD
    A[Start] --> B{Is it?};
    B -->|Yes| C[OK];
    C --> D[Rethink];
    D --> B;
    B ---->|No| E[End];
```

<!-- livebook:{"break_markdown":true} -->

https://mermaid-js.github.io/mermaid/#/sequenceDiagram

```mermaid
sequenceDiagram
    par Alice to Bob
        Alice->>Bob: Hello guys!
    and Alice to John
        Alice->>John: Hello guys!
    end
    Bob-->>Alice: Hi Alice!
    John-->>Alice: Hi Alice!
```

<!-- livebook:{"break_markdown":true} -->

https://mermaid-js.github.io/mermaid/#/entityRelationshipDiagram

```mermaid
erDiagram
    CUSTOMER ||--o{ ORDER : places
    CUSTOMER {
        string name
        string custNumber
        string sector
    }
    ORDER ||--|{ LINE-ITEM : contains
    ORDER {
        int orderNumber
        string deliveryAddress
    }
    LINE-ITEM {
        string productCode
        int quantity
        float pricePerUnit
    }
```

## Anonymous functions

* https://elixirschool.com/en/lessons/basics/functions/
* https://elixir-lang.org/getting-started/modules-and-functions.html
* https://elixircasts.io/intro-to-elixir-functions
* https://devato.com/post/getting-started-with-elixir-functions

```elixir
fn num -> num + 7 end
```

```elixir
(fn num -> num + 7 end).(10)
```

```elixir
&(&1 + 7)
```

```elixir
(&(&1 + 7)).(10)
```

```elixir
(fn a, b, c -> a + b + c end).(30, 30, 40)
```

```elixir
(&(&1 + &2 + &3)).(300, 300, 400)
```

```elixir
add_7 = fn num -> num + 7 end
```

```elixir
add_7.(8)
```

```elixir
another_add_7 = &(&1 + 7)
```

```elixir
another_add_7.(8)
```

## Moodules & named functions

```elixir
defmodule MyModule do
end
```

A module's name is its identity. Module name does NOT need to conform to any specific file name, directory hierarchy, or namespacing convention!

```elixir
defmodule MyModule do
  def add_2(num), do: 2 + num

  def add_3(num) do
    3 + num
  end
end
```

```elixir
MyModule.add_2(4)
```

```elixir
MyModule.add_3(9)
```

```elixir
alias MyModule, as: M

M.add_3(5)
```

```elixir
import MyModule

add_3(7)
```

## The pipeline operator, |>

```elixir
7 |> add_3() |> add_2()
```

```elixir
7 |> (&add_3/1).() |> (&add_2/1).()
```

```elixir
7 |> (&(&1 + 3)).() |> (&(&1 + 2)).()
```

```elixir
7
|> (&(&1 + 3)).()
|> (&(&1 + 2)).()
```

```elixir
7
|> add_3()
|> add_2()
```

## Multi-clause functions with pattern-matching

```elixir
# Greeting.greet/1 has three function clauses

defmodule Greeting do
  def greet(:professor_williams), do: "Hello, Professor Williams"

  def greet(:mom), do: "Hi, Mom!"

  def greet(:best_friend), do: "Yo! Wassup?!?!"
end
```

```elixir
alias Greeting, as: G

G.greet(:professor_williams) |> IO.inspect()
G.greet(:mom) |> IO.inspect()
G.greet(:best_friend) |> IO.inspect()
```

## Maps & Structs

```elixir
bird = %{fname: "Larry", lname: "Bird", number: 33, position: :forward}
```

```elixir
parish = %{fname: "Robert", lname: "Parish", number: 0, position: :center}
ainge = %{fname: "Danny", lname: "Ainge", number: 44, position: :guard}
johnson = %{fname: "Dennis", lname: "Johnson", number: 3, position: :guard}
mchale = %{fname: "Kevin", lname: "McHale", number: 32, position: :forward}
walton = %{fname: "Bill", lname: "Walton", number: 5, position: :center}
```

```elixir
players = [bird, parish, ainge, johnson, mchale, walton]

celtics = %{
  forwards: players |> Enum.filter(&(&1.position == :forward)),
  centers: players |> Enum.filter(&(&1.position == :center)),
  guards: players |> Enum.filter(&(&1.position == :guard))
}
```

```elixir
# https://elixir-lang.org/getting-started/structs.html
# https://elixircasts.io/intro-to-structs

defmodule Player do
  @enforce_keys [:fname, :lname, :number, :position]
  defstruct [:fname, :lname, :number, :position]
end

struct_players = players |> Enum.map(&struct(Player, &1))

celtics = %{
  forwards: struct_players |> Enum.filter(&(&1.position == :forward)),
  centers: struct_players |> Enum.filter(&(&1.position == :center)),
  guards: struct_players |> Enum.filter(&(&1.position == :guard))
}
```

```elixir
# This will fail because bob is missing keys required by the Player struct

bob = %Player{fname: "Bob"}
```

```elixir
# https://hexdocs.pm/elixir/1.13/Map.html

# struct_players = players |> Enum.map(&(struct(Player, &1) |> Map.put(:team, :celtics)))
struct_players =
  players |> Enum.map(&struct(Player, &1)) |> Enum.map(&Map.put(&1, :team, :celtics))

celtics = %{
  forwards: struct_players |> Enum.filter(&(&1.position == :forward)),
  centers: struct_players |> Enum.filter(&(&1.position == :center)),
  guards: struct_players |> Enum.filter(&(&1.position == :guard))
}
```
